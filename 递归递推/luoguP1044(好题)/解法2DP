/*
解法二: 动态规划
定义dp[][] 
第一维表示未进栈的元素 第二维表示栈内的元素
进栈 i-1,j+1 出栈 i+1,j
分为两种情况
1.栈空 (j==0 || i==j)
只能入不能出
dp[][] = dp [i-1][j+1]
2.栈不空
dp[][] = dp[i][j-1] + dp[i-1][j]
 */

#include<iostream>
#include<algorithm>
using namespace std;
const int N=20;
int dp[N][N];
int n;
int main(){
    cin>>n;

    for(int i=0;i<=n;i++)
        for(int j=i;j<=n;j++){
            if(i==0)
                dp[i][j] = 1;
            else if(i==j || j==0)
                dp[i][j] = dp[i-1][j];
            else
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
        }   


    cout<<dp[n][n]<< endl;
    return 0;
}